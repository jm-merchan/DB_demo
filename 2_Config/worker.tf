
# Define the data source for the latest Ubuntu AMI
data "aws_ami" "ubuntu_ami" {
  most_recent = true
  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"]
  }
  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
  owners = ["099720109477"] # Canonical account ID
}

data "aws_security_group" "selected" {
  name = "Worker Security Group"
}

data "aws_subnet" "selected" {
  filter {
    name   = "tag:Name"
    values = ["1public-ddbb"]
  }
}

resource "aws_instance" "worker" {
  #count                  = 1
  ami                    = data.aws_ami.ubuntu_ami.id
  instance_type          = "t2.micro"
  key_name               = aws_key_pair.ec2_key.key_name
  vpc_security_group_ids = [data.aws_security_group.selected.id]
  subnet_id              = data.aws_subnet.selected.id

  # user_data_replace_on_change = false
  user_data_base64 = data.cloudinit_config.boundary_worker.rendered

  tags = {
    Name = "boundary-worker"
  }

  lifecycle {
    ignore_changes = [
      user_data_base64,
    ]
  }
}


resource "boundary_worker" "pkiWorker" {
  scope_id                    = "global"
  name                        = "boundary-pki-worker"
  worker_generated_auth_token = ""
}

/* This locals block sets out the configuration for the Boundary Service file and 
the HCL configuration for the PKI Worker. Within the boundary_egress_worker_hcl_config
the controller_generated_activation_token pulls in the one-time token generated by the 
boundary_worker resource above.

The cloud_init config takes the content of the two configurations and specifies the path
on the EC2 instance to write to.
*/
locals {
  boundary_worker_service_config = <<-WORKER_SERVICE_CONFIG
  [Unit]
  Description="HashiCorp Boundary - Identity-based access management for dynamic infrastructure"
  Documentation=https://www.boundaryproject.io/docs
  #StartLimitIntervalSec=60
  #StartLimitBurst=3

  [Service]
  ExecStart=/usr/bin/boundary server -config=/etc/boundary.d/pki-worker.hcl
  ExecReload=/bin/kill --signal HUP $MAINPID
  KillMode=process
  KillSignal=SIGINT
  Restart=on-failure
  RestartSec=5
  TimeoutStopSec=30
  LimitMEMLOCK=infinity

  [Install]
  WantedBy=multi-user.target

WORKER_SERVICE_CONFIG

  boundary_worker_hcl_config = <<-WORKER_HCL_CONFIG
  disable_mlock = true
  hcp_boundary_cluster_id = "${split(".", split("//", data.terraform_remote_state.local_backend.outputs.boundary_public_url)[1])[0]}"

  listener "tcp" {
    address = "0.0.0.0:9202"
    purpose = "proxy"
  }

  worker {
    public_addr = "IP" # This ip will be updated with the host public ip
    # Connecting to upstream worker created in the previous step
    auth_storage_path = "/etc/boundary.d/worker"
    controller_generated_activation_token = "${boundary_worker.pkiWorker.controller_generated_activation_token}"
    tags {
      type = ["worker1", "upstream"]
    }
  }
WORKER_HCL_CONFIG


  postgres_db_config = <<-WORKER_DB_CONFIG
      ${jsonencode({
      write_files = [
        {
          path        = "/tmp/roles.sql"
          permissions = "0644"
          owner       = "root:root"
          encoding    = "b64"
          content     = filebase64("roles.sql")
        },
      ]
    })}
WORKER_DB_CONFIG

  cloudinit_config_boundary_worker = {
    write_files = [
      {
        content = local.boundary_worker_service_config
        path    = "/etc/systemd/system/boundary.service"
      },

      {
        content = local.boundary_worker_hcl_config
        path    = "/etc/boundary.d/pki-worker.hcl"
      },
    ]
  }
}

/* This data block pulls in all the different parts of the configuration to be deployed.
These are executed in the order that they are written. Firstly, the boundary-worker binary
will be called. Secondly, the configuration specified in the locals block will be called.
Lastly the boundary-worker process is started using the pki-worker.hcl file.
*/
data "cloudinit_config" "boundary_worker" {
  gzip          = false
  base64_encode = true

  part {
    content_type = "text/x-shellscript"
    content      = <<-EOF
      #!/bin/bash
      curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add - ;\
      sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main" ;\
      sudo apt-get update && sudo apt-get install boundary-enterprise postgresql-client-common postgresql-client git -y
      sudo mkdir /etc/boundary.d/worker

      curl 'https://api.ipify.org?format=txt' > /tmp/ip
      export IP1=$(cat /tmp/ip)
      sudo sed -ibak "s/IP/$IP1/g" /etc/boundary.d/pki-worker.hcl
  EOF
  }
  part {
    content_type = "text/cloud-config"
    content      = yamlencode(local.cloudinit_config_boundary_worker)
  }
  part {
    content_type = "text/cloud-config"
    content      = yamlencode(local.postgres_db_config)
  }
  part {
    content_type = "text/x-shellscript"
    content      = <<-EOF
    #!/bin/bash
    sudo systemctl daemon-reload
    sudo systemctl enable boundary
    sudo systemctl start boundary
    cd /tmp
    git clone https://github.com/hashicorp/learn-boundary-vault-quickstart
      
    sudo PGPASSWORD=${var.password} psql -h ${data.terraform_remote_state.local_backend.outputs.rds_hostname} -p 5432 -U demo -d postgres -c "CREATE DATABASE northwind;"
    sudo PGPASSWORD=${var.password} psql -h ${data.terraform_remote_state.local_backend.outputs.rds_hostname} -p 5432 -d northwind -U demo < ./learn-boundary-vault-quickstart/northwind-database.sql --quiet
    sudo PGPASSWORD=${var.password} psql -h ${data.terraform_remote_state.local_backend.outputs.rds_hostname} -p 5432 -d postgres -U demo < /tmp/roles.sql --quiet

    EOF
  }
}


